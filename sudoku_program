#include <iostream>
using namespace std;

const int N = 9; // Sudoku grid size

// Function to print the Sudoku grid
void printGrid(int grid[N][N]) {
    cout << "\nCurrent Sudoku Grid:\n";
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            cout << grid[row][col] << " ";
            if ((col + 1) % 3 == 0) cout << " ";
        }
        cout << endl;
        if ((row + 1) % 3 == 0) cout << endl;
    }
}

// Check if num validity at grid[row][col]
bool isValid(int grid[N][N], int row, int col, int num) {
    // Check row
    for (int x = 0; x < N; x++) {
        if (grid[row][x] == num) return false;
    }

    // Check column
    for (int x = 0; x < N; x++) {
        if (grid[x][col] == num) return false;
    }

    // Check 3x3 subgrid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[i + startRow][j + startCol] == num) return false;
        }
    }

    return true;
}

// Check if no zero left. Sudoku solved 
bool isSolved(int grid[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (grid[i][j] == 0) return false;
        }
    }
    return true;
}

int main() {
    // unsolved Sudoku (0 = empty)
    int grid[9][9] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},

        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},

        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    cout << "Welcome to Interactive SUDOKU!\n";
    printGrid(grid);

    while (!isSolved(grid)) {
        int r, c, num;
        cout << "Enter row (1-9), column (1-9), and number (1-9): ";
        cin >> r >> c >> num;

        // check the range of input
        if (r < 1 || r > 9 || c < 1 || c > 9 || num < 1 || num > 9) {
            cout << "Invalid input. Please enter numbers between 1-9.\n";
            continue;
        }

        int row = r - 1;
        int col = c - 1;
		
		// check the cell is empty
        if (grid[row][col] != 0) {
            cout << "Cell already filled! Choose another.\n";
            continue;
        }
		
		// call func. to check num validity
        if (isValid(grid, row, col, num)) {
            grid[row][col] = num;
            printGrid(grid);
        } else {
            cout << "Invalid number. Cannot place " << num << " at (" << r << "," << c << ").\n";
        }
    }

    cout << "\nCongratulations! You have solved the Sudoku.\n";
    printGrid(grid);
    
    return 0;
}
